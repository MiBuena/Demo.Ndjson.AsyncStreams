@page "/"
@using System.Text.Json
@using global::Ndjson.AsyncStreams.Net.Http
@inject HttpClient Http

<PageTitle>Demo.Ndjson.AsyncStreams.Blazor.WebAssembly</PageTitle>

<button @onclick="FetchWeatherForecastsJson">Fetch Weather Forecast</button>
<button @onclick="StreamWeatherForecastsJson">Stream Weather Forecast (JSON)</button>
<button @onclick="CancelButton_Stream">Cancel stream</button>
<button @onclick="StreamWeatherForecastsNdjson">Stream Weather Forecast (NDJSON)</button>
<div>@CancellationMessage</div>
<hr />
<table>
    <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
    </thead>
    <tbody>
        @foreach (WeatherForecast weatherForecast in weatherForecasts)
        {
            <tr>
                <td>@weatherForecast.DateFormatted</td>
                <td>@weatherForecast.TemperatureC</td>
                <td>@weatherForecast.TemperatureF</td>
                <td>@weatherForecast.Summary</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private string CancellationMessage = null;

    private CancellationTokenSource _cts;

    private List<WeatherForecast> weatherForecasts = new List<WeatherForecast>();

    private async Task FetchWeatherForecastsJson()
    {
        weatherForecasts = await Http.GetFromJsonAsync<List<WeatherForecast>>("api/WeatherForecasts") ?? new List<WeatherForecast>();
    }

    private async Task StreamWeatherForecastsJson()
    {
        weatherForecasts = new List<WeatherForecast>();

        try
        {
            _cts = new CancellationTokenSource();

            StateHasChanged();

            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, "api/WeatherForecasts/negotiate-stream");
            request.Headers.Add("Accept", "application/json");
            request.SetBrowserResponseStreamingEnabled(true);

            using HttpResponseMessage response = await Http.SendAsync(request, HttpCompletionOption.ResponseHeadersRead, _cts.Token);

            response.EnsureSuccessStatusCode();

            using Stream responseStream = await response.Content.ReadAsStreamAsync();

            await foreach (WeatherForecast weatherForecast in JsonSerializer.DeserializeAsyncEnumerable<WeatherForecast>(responseStream, new JsonSerializerOptions { PropertyNameCaseInsensitive = true, DefaultBufferSize = 128 }))
            {
                weatherForecasts.Add(weatherForecast);

                StateHasChanged();
            }
        }
        catch (OperationCanceledException ex)
        {
            CancellationMessage = "Stream cancelled";
        }
        finally
        {
            _cts.Dispose();
            _cts = null;
        }
    }
    public void CancelButton_Stream()
    {
        _cts.Cancel();
    }

    private async Task StreamWeatherForecastsNdjson()
    {
        weatherForecasts = new List<WeatherForecast>();

        StateHasChanged();

        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, "api/WeatherForecasts/negotiate-stream");
        request.Headers.Add("Accept", "application/x-ndjson");
        request.SetBrowserResponseStreamingEnabled(true);

        using HttpResponseMessage response = await Http.SendAsync(request, HttpCompletionOption.ResponseHeadersRead);

        response.EnsureSuccessStatusCode();

        await foreach (WeatherForecast weatherForecast in response.Content.ReadFromNdjsonAsync<WeatherForecast>())
        {
            weatherForecasts.Add(weatherForecast);

            StateHasChanged();
        }
    }
    }