@page "/"
@using System.Text.Json
@using System.Buffers
@using System.Text
@inject HttpClient Http

<PageTitle>Demo.Ndjson.AsyncStreams.Blazor.WebAssembly</PageTitle>

<button id="fetch" @onclick="FetchWeatherForecastsJson">Fetch Weather Forecast</button>
<button id="fetch-stream" @onclick="StreamWeatherForecastsJson">Stream Weather Forecast (JSON)</button>
<hr />
<table id="weather-forecasts">
    <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
    </thead>
    <tbody>
        @foreach (WeatherForecast weatherForecast in weatherForecasts)
        {
            <tr>
                <td>@weatherForecast.DateFormatted</td>
                <td>@weatherForecast.TemperatureC</td>
                <td>@weatherForecast.TemperatureF</td>
                <td>@weatherForecast.Summary</td>
            </tr>
        }
    </tbody>
</table>

@code {

    private List<WeatherForecast> weatherForecasts = new List<WeatherForecast>();

    private async Task FetchWeatherForecastsJson()
    {
        weatherForecasts = await Http.GetFromJsonAsync<List<WeatherForecast>>("api/WeatherForecasts") ?? new List<WeatherForecast>();
    }

    private async Task StreamWeatherForecastsJson()
    {
        weatherForecasts = new List<WeatherForecast>();
        this.StateHasChanged();

        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, "api/WeatherForecasts/negotiate-stream");
        request.SetBrowserResponseStreamingEnabled(true);

        using HttpResponseMessage response = await Http.SendAsync(request, HttpCompletionOption.ResponseHeadersRead);

        response.EnsureSuccessStatusCode();

        using Stream responseStream = await response.Content.ReadAsStreamAsync();

        await foreach (WeatherForecast weatherForecast in JsonSerializer.DeserializeAsyncEnumerable<WeatherForecast>(responseStream, new JsonSerializerOptions { PropertyNameCaseInsensitive = true, DefaultBufferSize = 128 }))
        {
            weatherForecasts.Add(weatherForecast);
            this.StateHasChanged();
        }
    }
}